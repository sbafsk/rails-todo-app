87.
- >'rails generate controller welcome index' created 
WelcomeController, an #index action/method on the
controller, and set route for us.
- Rails emphasizes "Convention over configuration", which
mena that if we follow certain patterns, Rails will 
do a lot of the work for us.

88.
- ERB sections of our view file are enclosed in triangle brackets
and percentage signs, with or without an equals sign at the 
beginning: <% :ruby_code %> or <%= :ruby_code %>
- The equals sign means that the value of the ruby expression will
be inserted in to the text output, otherwise the code gets invisibly.
- Anything outside an embedded Ruby expression is just regular HTML.


89.
To manage tasks, we created:
- a "Taks" model, which accesses a table in our database, "task".
- a controller, "TaskController" which has a bunch of methods,
which we call actions.
- some view pages, with names which match controller actions.
- routes which map paths to controller actions.

90.
- `form_for` is a Rails method which takes a model instance
(@task) as an argument, and creates a form which submits
attributes for that model.
- the #new action just need to render the form page, but since we
need a blank task object to pass to our form, we set `@task = Task.new`
- #create actually saves the new task to the database. We have to
whitelist our parameters `params.require(object).permit(fields)`
as a security measure.

91.
- Notice that we can reuse the same form for #edit as we did for #new
- When we go to 'task/:id/edit' the id from the path is available 
as params[:id]
- On the #update action we have to find the task in the database
again because the object in @task does not persist across request.

92.
- The file for the form is called '_form.html.erb'. The underscore
indicates that it's a partial, but when we render a partial 
we don't include the underscore: `render 'form'`
- The form partial goes in the 'views/tasks/' folder; if it was
shared by multiple resources we could put it in 'views/application/`
instead, and Rails would look there if it didn't fin the partials
in 'tasks'.

93.
- As we see when we look at our routes, #destroy is not accessed
with GET request, but by a DELETE request to the path for that task.
- The different verbs/methods indicate different types of request
to the server. GET simply request the resource at the target location.
POST sends data to create a new resource. PUT/PATCH sends data to 
update a resource, and DESTROY tells the server to delete the resource.

94.
- Just like the #edit action, the first thing #show needs to 
do is find the right Task to display. Then it just renders the 
view page.
- The route for the show action is the same as destroy and 
update, but with GET as the HTTP verb/method.

95.
- The validation is defined on our Task model, so it gets checked
when we try to save a task to the database.
- If the new task we're trying to save does not have a title,
a couble of things will happen:
- Te save method will return false, so the #create action will
render the 'new' page again instead of redirecting to the task list.
- The task object stored in @task will receive some errors, which
we can display at the top of the 'new' page when it re-renders.

96.
- ActiveRecord Migrations are used to modified the
schema of our database.
-They also act as a record of all the changes the 
schema has gone through.
- They are reversible (if written correctly), so if we want, 
we can roll back our databse to a previous schema.

97.
- Because the route was a simple GET request, all we had to 
do was make a link to it, but the linked path had to include
the boolean parameter, so we had to build up.
- Because the checkbox was created with Rails view
helper method, the return value is just HTML text, which
mean it's fine to pass it to the link_to helper method.

98.
- The code in our seed file is just Ruby code. We can run the
same code in our rails console and get the same result.
- If we have validations on our Task model, Then
`Task.create(...)` will only save to the database if the
attributes we pass in pass the validations.
